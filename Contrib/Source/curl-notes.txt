cd winbuild
nmake /f Makefile.vc mode=static VC=15 ENABLE_WINSSL=yes ENABLE_IPV6=yes WITH_ZLIB=static DEBUG=yes ENABLE_IDN=no ENABLE_SSPI=yes RTLIBCFG=static MACHINE=x86 
nmake /f Makefile.vc mode=static VC=15 ENABLE_WINSSL=yes ENABLE_IPV6=yes WITH_ZLIB=static DEBUG=no ENABLE_IDN=no ENABLE_SSPI=yes RTLIBCFG=static MACHINE=x86 


Add to "lib\config-win32.h"


#undef WINVER
#define WINVER 0x0501
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x0501

Comment entire block starting with:

#if defined(_MSC_VER) && (_MSC_VER >= 1700)

Patch http.c !

find:
  while(*ptr && ISSPACE(*ptr)) 

replace with:
  if(*ptr && ISSPACE(*ptr)) 


IMPORTANT! Patch for support utf-8 encoded filenames:

-- curl_setup.h --

#if defined(_WIN32) && !defined(__MINGW32CE__)
    #define fopen _wfopen_hack
    #define open _wopen_hack

    FILE *_wfopen_hack(const char *file, const char *mode);
    int _wopen_hack(const char *file, int oflags, ...);
#endif

-- curl.h --
#define CURL_WIN32_UTF8_FILENAMES


-- file.c --

#if defined(_WIN32) && !defined(__MINGW32CE__)
    #include <windows.h>
    #include <io.h>
#endif

#if defined(_WIN32) && !defined(__MINGW32CE__)
    FILE *
        fopen_utf8(const char *file, const char *mode)
    {
        wchar_t* wmode = 0;
        wchar_t *wfile;
        FILE* result = 0;

        int length = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, file, -1, 0, 0);
        if (!length) {
            return 0;
        }
        wfile = (wchar_t*)malloc(length * sizeof(wchar_t));
        if (!wfile) {
            return 0;
        }
        if (!MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, file, -1, wfile, length)) {
            goto cleanup;
        }

        length = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, mode, -1, 0, 0);
        if (!length) {
            goto cleanup;
        }

        wmode = (wchar_t*)malloc(length * sizeof(wchar_t));
        if (!wmode) {
            goto cleanup;
        }

        if (!MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, mode, -1, wmode, length)) {
            goto cleanup;
        }

        result = _wfopen(wfile, wmode);
    cleanup:
        free(wfile);
        free(wmode);
        return result;
    }

    int
        open_utf8(const char *file, int oflags, ...)
    {
        wchar_t *wfile;
        int mode = 0;
        int result = -1;

        if (oflags & _O_CREAT)
        {
            va_list ap;
            va_start(ap, oflags);
            mode = (int)va_arg(ap, int);
            va_end(ap);
        }

        int length = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, file, -1, 0, 0);
        if (!length) {
            errno = ENOMEM;
            return -1;
        }
        wfile = (wchar_t*)malloc(length * sizeof(wchar_t));
        if (!wfile) {
            errno = ENOMEM;
            return -1;
        }
        if (!MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, file, -1, wfile, length)) {
            goto cleanup;
        }

        result = _wopen(wfile, oflags, mode);
    cleanup:
        free(wfile);
        return result;
    }

    int stat_utf8(
        const char *path,
        struct _stati64 *buffer
    ) {
        wchar_t *wfile;
        int result = -1;

        int length = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, path, -1, 0, 0);
        if (!length) {
            errno = ENOMEM;
            return -1;
        }
        wfile = (wchar_t*)malloc(length * sizeof(wchar_t));
        if (!wfile) {
            errno = ENOMEM;
            return -1;
        }
        if (!MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, path, -1, wfile, length)) {
            goto cleanup;
        }
        result = _wstat64(wfile, buffer);
cleanup:
        free(wfile);
        return result;
    }
 

    int access_utf8(const char *path, int mode) {
        wchar_t *wfile;
        int result = -1;

        int length = MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, path, -1, 0, 0);
        if (!length) {
            errno = ENOMEM;
            return -1;
        }
        wfile = (wchar_t*)malloc(length * sizeof(wchar_t));
        if (!wfile) {
            errno = ENOMEM;
            return -1;
        }
        if (!MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, path, -1, wfile, length)) {
            goto cleanup;
        }
        result = _waccess(wfile, mode);
    cleanup:
        free(wfile);
        return result;
    }
#endif

Ubuntu:

./configure --disable-shared --enable-static --disable-dict --disable-telnet --disable-tftp --disable-rtsp --disable-pop3 --disable-imap --disable-smtp --disable-gopher --disable-smb

