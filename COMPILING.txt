============  Building Image Uploader on Windows ============

Before building Image Uploader you should copy file "Source\versioninfo.h.dist" to "Source\versioninfo.h". This file will be regenerated 
by "versioninc.py" utility and will contain information about build number, version, date, git commit hash.
Python 2.7 interpreter should be installed for performing pre-build and post-build events. Ensure that your %PATH% environment 
variable includes the directory of your Python distribution.

You need CMake (tested with v3.14.0) and Microsoft Visual Studio 2017 or newer (with C++ compiler) to build Image Uploader from sources. 
Also you need to compile 3rd-party libraries (such as boost, glog, jsoncpp, etc) against your compiler version.

All libraries (except ffmpeg) can be built statically with static runtime (/MT option for VC++ compiler). 
To enable Windows XP support the corresponding toolset has to be chosen (for example "v141_xp" in Visual Studio 2017).

To generate Visual Studio solution from CMakeLists.txt you need to create a directory for 
temporary files and call cmake:

mkdir Build
cd Build
cmake <path_to_imageuploader_source>\Source

The last command will generate project files for your default compiler (should be Visual Studio). 
You can use CMake GUI to achieve the same result.

If you are using v141_xp toolset, for fixing broken _stat() function on Windows XP you should change 
the "TargetUniversalCRTVersion" option in file
"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.Cpp.Common.props"
to the latest Windows 10 SDK version installed on your computer. Tested with Windows SDK 10.0.17763.0 .
 
You can download all necessary libraries (including header-only libraries in "Include" subfolder) by following link:

https://drive.google.com/drive/folders/1dHjuif2sagpyNPoPs_EL63On1_A0m98N?usp=sharing


Image Uploader is using the following libraries:

WTL             http://sourceforge.net/projects/wtl/

libcurl         http://curl.haxx.se/libcurl/ (patched version)

openssl         https://www.openssl.org

zlib            http://www.zlib.net

Boost           http://www.boost.org (patched version)

pcre            http://www.pcre.org

pcre++          http://www.daemon.de/PCRE (patched version)

squirrel        http://squirrel-lang.org (patched version)

sqrat		    http://scrat.sourceforge.net (patched version)

ffmpeg          https://www.ffmpeg.org

Boost.Process   https://github.com/zenden2k/boost-process-utf8 (patched version with utf-8 support)

tinyxml         http://sourceforge.net/projects/tinyxml/

gumbo           https://github.com/google/gumbo-parser

gumbo-query     https://github.com/lazytiger/gumbo-query

minizip         http://www.winimage.com/zLibDll/minizip.html

jsoncpp         https://github.com/open-source-parsers/jsoncpp

glog            https://github.com/google/glog

libwebp         https://github.com/webmproject/libwebp

base64          https://github.com/aklomp/base64

UTF8-CPP        http://utfcpp.sourceforge.net/ 

DirectShow BaseClasses (strmbasd.lib, strmbase.lib) - part of Windows SDK

Libraries for building Mega.nz:

Mega SDK        https://github.com/meganz/sdk

Crypto++        https://www.cryptopp.com/

c-ares          https://c-ares.haxx.se/

libuv           https://github.com/libuv/libuv

Libraries for building tests:

Google Mock     https://github.com/abseil/googletest


============  Building console utility (imgupload) on Ubuntu ============

Before compiling install the following packages:

sudo apt-get install g++ cmake cmake-qt-gui autoconf automake libtool fakeroot libgtest-dev libboost-dev libboost-filesystem-dev libboost-system-dev libboost-locale-dev libboost-thread-dev libssl-dev libpcre3-dev libc-ares-dev liburiparser-dev libicu-dev libsqlite3-dev libreadline-dev libfreeimage-dev libcurl4-openssl-dev

Image Uploader is using Google Mock library for tests. If you want to run them, you have to build gmock library from source:

cd /usr/src/gtest
sudo cmake .
sudo make
sudo mv libg* /usr/lib/

Note that the following libraries: glog, gflags, libuv, cryptopp, gumbo, jsoncpp have to be statically built from source. 
Before building glog remove package libgflags-dev from your system.

Debian package dependencies:
libpcre3
#libgumbo1
#libcrypto++9v5
libcurl3
libssl1.0.0
#libgoogle-glog0

Including those for mega.nz:
libc-ares2
libuv1
libsqlite3-0
libfreeimage3

== Building qimageuploader on Ubuntu
sudo apt install qt5-default libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
